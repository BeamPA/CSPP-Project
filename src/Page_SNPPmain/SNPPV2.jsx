import { useState } from "react";
import Swal from "sweetalert2";
import icon from "../assets/arrow-up.png";
import axios from "axios";
import GridComponent from "./GridComponent";

function SNPP() {
  // ###########################State Management######################################
  const initialKeys = [
    "SDR", "EDR", "Flood Detection", "Surface Reflectance and Vegetation Index", "Active Fire", "ASCI EDR",
    "ACSPO SST", "CLAVRx Cloud Retrieval", "UW Hyperspectral Retrieval", "HEAP NUCAPS CrIS/ATMS IASI/AMSUA/MHS Retrieval",
    "MiRS Microwave Retrieval", "GCOMW-1 AMSR-2 GAASP", "IAPP", "Real-time Software Telemetry Processing System (RT-STPS)",
    "Sounder QuickLook (QL)", "Polar2Grid Reprojection", "S-NPP HYDRA2 Visualization and Analysis Toolkit"
  ];

  const [hoveredKey, setHoveredKey] = useState(null);
  const [searchQuery, setSearchQuery] = useState("");
  const [buttonStates, setButtonStates] = useState(Object.fromEntries(initialKeys.map((key) => [key, "Off"])));
  const [startStates, setStartStates] = useState(Object.fromEntries(initialKeys.map((key) => [key, "Start"])));
  const [progressStates, setProgressStates] = useState(Object.fromEntries(initialKeys.map((key) => [key, 0])));
  const [fileName, setFileName] = useState("Import RDR file");
  const [intervals, setIntervals] = useState({}); // ‡πÄ‡∏Å‡πá‡∏ö interval ‡πÅ‡∏ï‡πà‡∏•‡∏∞ key
  const [isRunning, setIsRunning] = useState(Object.fromEntries(initialKeys.map((key) => [key, false])));

  // ##############################API Call Functions###################################

  const runCommand = async (key) => {
    if (isRunning[key]) return; // ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô‡∏ã‡πâ‡∏≥
    try {
      setIsRunning((prev) => ({ ...prev, [key]: true })); // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏±‡∏ô‡∏≠‡∏¢‡∏π‡πà
      setStartStates((prev) => ({ ...prev, [key]: "Stop" }));
      setProgressStates((prev) => ({ ...prev, [key]: 0 })); // ‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏° progress ‡∏ó‡∏µ‡πà 0
      
      // ‚úÖ ‡∏™‡πà‡∏á key ‡πÑ‡∏õ‡∏ó‡∏µ‡πà backend ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
      const response = await axios.post("http://localhost:5000/start-command", { boxType: key });

      console.log("‚úÖ Command started:", response.data);
    } catch (error) {
      console.error("‚ùå Error starting command:", error);
    }
  };

  const shutdownServer = async (key) => {
    try {
      console.log(`üõë Shutting down ${key}...`);
      await fetch("http://localhost:5000/shutdown", { method: "POST" });
    } catch (error) {
      console.error("‚ùå Error shutting down server:", error);
    }
  };

  const toggleStartStop = (key) => {
    if (buttonStates[key] === "On") 
    {
      setStartStates((prevState) => {
        const newState = prevState[key] === "Start" ? "Stop" : "Start";

        if (newState === "Stop") {
          // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏±‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
          if (isRunning[key]) return prevState; // ‡∏ñ‡πâ‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡πâ‡∏≥

          // ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ isRunning ‡πÄ‡∏õ‡πá‡∏ô true ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡πâ‡∏≥
          setIsRunning((prev) => ({ ...prev, [key]: true }));
          setProgressStates((prev) => ({ ...prev, [key]: 0 })); // üîπ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ progress ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô 0
          runCommand(key); // ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å

          // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö progress ‡∏ó‡∏∏‡∏Å ‡πÜ 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
          const interval = setInterval(async () => {
            try {
              const progressRes = await axios.get("http://localhost:5000/check-progress");
              const progress = progressRes.data[key]?.progress ?? 0; // ‡πÉ‡∏ä‡πâ ?? ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ default ‡πÄ‡∏õ‡πá‡∏ô 0 ‡∏´‡∏≤‡∏Å undefined

              setProgressStates((prev) => ({ ...prev, [key]: progress }));// üîπ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï progress

              if (progress >= 100) {
                clearInterval(interval);
                setIsRunning((prev) => ({ ...prev, [key]: false })); // ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏±‡∏ô

                Swal.fire({
                  title: "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!",
                  text: `${key} ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß`,
                  icon: "success",
                  confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á",
                }).then(() => {
                  shutdownServer(key); // ‚úÖ ‡∏õ‡∏¥‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞ process ‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ
                }).then(() => {
                  // üî¥ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å shutdownServer ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à (‡∏õ‡∏¥‡∏î‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå)
                  shutdownServer();
                });
              }
            } catch (error) {
              console.error("‚ùå Error checking progress:", error);
            }
          }, 1000);

          setIntervals((prev) => ({ ...prev, [key]: interval })); // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö interval ‡πÉ‡∏ô state
        } else {
          setProgressStates((prev) => ({ ...prev, [key]: 0 }));

          // ‚úÖ ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå interval ‡∏Å‡πà‡∏≠‡∏ô shutdown
          if (intervals[key]) {
            clearInterval(intervals[key]);
          }

          // ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ isRunning ‡πÄ‡∏õ‡πá‡∏ô false ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î Stop
          setIsRunning((prev) => ({ ...prev, [key]: false }));

          // ‚úÖ ‡∏õ‡∏¥‡∏î process ‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î Stop
          shutdownServer(key);
        }

        return { ...prevState, [key]: newState };
      });
    }
  };


  // #################################################################

  const handleSearch = (e) => {
    setSearchQuery(e.target.value.toLowerCase());
  };

  const filteredKeys = initialKeys.filter((key) =>
    key.toLowerCase().includes(searchQuery)
  );


  const handleFileUpload = (e) => {
    const file = e.target.files[0];
    if (file) {
      if (!file.name.endsWith(".h5")) {
        Swal.fire({
          title: "‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!",
          text: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• .h5 ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô",
          icon: "error",
          confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á",
        });
        e.target.value = "";
        setFileName("Import RDR file");
        return;
      }
      setFileName(file.name);
    } else {
      setFileName("Import RDR file");
    }
  };

  const toggleButton = (key) => {
    setButtonStates((prevState) => {
      const newState = prevState[key] === "Off" ? "On" : "Off";
      if (newState === "Off") {
        setStartStates((prevStartStates) => ({ ...prevStartStates, [key]: "Start" }));
      }
      return { ...prevState, [key]: newState };
    });
  };

  // #################################################################


  return (
    <div>
        {/* ‡∏Å‡∏•‡πà‡∏≠‡∏á Search */}
        <input
          type="text"
          placeholder="Search"
          className="w-full p-2 border border-gray-300 rounded-2xl mb-6"
          onChange={handleSearch}
        />

        {/* ‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ RDR file */}
        <div className="mb-4">
          <label
            htmlFor="file-upload"
            className="flex justify-between w-full items-center p-2 border border-gray-300 rounded-2xl cursor-pointer bg-white"
          >
            <span className="text-gray-700">{fileName}</span>
            <input
              id="file-upload"
              type="file"
              className="hidden"
              accept=".h5"
              onChange={handleFileUpload}
            />
            <img src={icon} alt="icon" className="w-6" />
          </label>
        </div>

        {/* Grid Component */}
        <GridComponent
          filteredKeys={filteredKeys}
          buttonStates={buttonStates}
          startStates={startStates}
          progressStates={progressStates}
          toggleButton={toggleButton}
          toggleStartStop={toggleStartStop}
          runCommand={runCommand}
          setHoveredKey={setHoveredKey}
          hoveredKey={hoveredKey}
        />
      </div>
  );
}

export default SNPP;
